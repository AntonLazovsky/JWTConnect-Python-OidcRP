
PORT: 8089
BASEURL: "https://localhost:8089"

# If BASE is https these has to be specified
SERVER_CERT: "certs/cert.pem"
SERVER_KEY: "certs/key.pem"
CA_BUNDLE: None

VERIFY_SSL: False

KEYDEFS: &keydef
  -
    "type: "RSA"
    "key: ''
    "use: ["sig"]
  -
    "type: "EC"
    "crv: "P-256"
    "use: ["sig"]

PRIVATE_JWKS_PATH: "jwks_dir/jwks.json"
PUBLIC_JWKS_PATH: 'static/jwks.json'
# information used when registering the client, this may be the same for all OPs

services: &services
  discovery:
    class: oidcservice.rp.provider_info_discovery.ProviderInfoDiscovery
  registration:
    class: oidcservice.rp.registration.Registration
  authorization:
    class: oidcservice.oidc.authorization.Authorization
  accesstoken:
    class: oidcservice.oidc.accesstoken.Accesstoken
  refresh_accesstoken:
    class: oidcservice.oidc.refresh_access_token.RefreshAccessToken
  userinfo:
    class: oidcservice.oidc.userinfo.UserInfo
  end_session:
    class: oidcservice.oidc.session.EndSession

client_preferences: &prefs
  application_name: rphandler
  application_type: web
  contacts: [ops@example.com]
  response_types: [code]
  scope: [openid, profile, email, address, phone]
  token_endpoint_auth_method: [client_secret_basic, client_secret_post]


# The keys in this dictionary are the OPs short user friendly name
# not the issuer (iss) name.

clients: 
  # The ones that support webfinger, OP discovery and client registration
  # This is the default, any client that is not listed here is expected to
  # support dynamic discovery and registration.
  "": 
    client_preferences: *prefs
    redirect_uris: None
    services: *services
  # Supports OP information lookup but not client registration
  google:
    issuer: "https://accounts.google.com/"
    client_id: "xxxxxxxxx.apps.googleusercontent.com"
    client_secret: "2222222222"
    redirect_uris: 
      - https://localhost:8089/authz_cb/google
    client_preferences:
      response_types: 
        - code
      scope: 
        - openid 
        - profile
        - email
      token_endpoint_auth_method: "client_secret_basic"
    allow:
      issuer_mismatch: true
    services:
      discovery:
        class: oidcservice.rp.provider_info_discovery.ProviderInfoDiscovery
        
      authorization:
        class: oidcservice.oidc.authorization.Authorization
        
      accesstoken:
        class: oidcservice.oidc.accesstoken.Accesstoken
        
      refresh_accesstoken:
        class: oidcservice.oidc.refresh_access_token.RefreshAccessToken
        
      userinfo:
        class: oidcservice.oidc.userinfo.UserInfo
        
      end_session:
        class: oidcservice.oidc.session.EndSession
        
  microsoft: 
    issuer: 'https://login.microsoftonline.com/<tenant_id>/v2.0'
    client_id: 242424242424'
    client_secret': ipipipippipipippi
    redirect_uris: 
      - https://localhost:8089/authz_cb/microsoft
    client_preferences:
      response_types: 
        - id_token
      scope: 
        - openid,
      token_endpoint_auth_method: private_key_jwt
      response_mode: form_post
      allow:
        issuer_mismatch: True
      services:
        discovery:
          class: oidcservice.rp.provider_info_discovery.ProviderInfoDiscovery          
        authorization:
          class: oidcservice.oidc.authorization.Authorization          
  linkedin:
    issuer: https://www.linkedin.com/oauth/v2/
    client_id: xxxxxxx
    client_secret: yyyyyyy
    redirect_uris: 
      - https://localhost:8089/authz_cb/linkedin
    behaviour:
      response_types: 
        - code
      scope: 
        - r_basicprofile
        - r_emailaddress
      token_endpoint_auth_method: client_secret_post
    provider_info:
    authorization_endpoint:
      https://www.linkedin.com/oauth/v2/authorization
    token_endpoint: 
      https://www.linkedin.com/oauth/v2/accessToken
    userinfo_endpoint:
      "https://api.linkedin.com/v1/people/~?format=json"
    userinfo_request_method: GET
    services:
      authorization:
        class: oidcservice.oidc.authorization.Authorization
      accesstoken:
        class: oidcrp.provider.linkedin.AccessToken
      userinfo:
        class: oidcrp.provider.linkedin.UserInfo
  facebook:
    issuer: "https://www.facebook.com/v2.11/dialog/oauth"
    behaviour:
      response_types: 
        - code
      scope: 
        - email
        - public_profile
      token_endpoint_auth_method: 
        - ''
    redirect_uris: 
      - https://localhost:8089/authz_cb/facebook
    provider_info:
      authorization_endpoint:
        https://www.facebook.com/v2.11/dialog/oauth
      token_endpoint:
        https://graph.facebook.com/v2.11/oauth/access_token
      userinfo_endpoint:
        https://graph.facebook.com/me
    services:
      authorization:
        class: oidcservice.oidc.authorization.Authorization
      accesstoken:
        class: oidcservice.oidc.accesstoken.Accesstoken
        kwargs:
          default_authn_method: ''
      userinfo:
        class: oidcservice.oidc.userinfo.UserInfo
        kwargs:
          default_authn_method: ''
  github:
    issuer: 
      https://github.com/login/oauth/authorize
    client_id: eeeeeeeee
    client_secret: aaaaaaaaaaaaa
    redirect_uris: 
      - /authz_cb/github
    behaviour:
      response_types: 
        - code
      scope: 
        - user
        - public_repo
      token_endpoint_auth_method: 
        - ''
    provider_info:
      authorization_endpoint:
        https://github.com/login/oauth/authorize
      token_endpoint:
        https://github.com/login/oauth/access_token
      userinfo_endpoint:
        https://api.github.com/user
    services:
      authorization:
        class: oidcservice.oidc.authorization.Authorization
      accesstoken:
        class: oidcservice.oidc.accesstoken.Accesstoken
      userinfo:
        class: oidcservice.oidc.userinfo.UserInfo
        kwargs:
          default_authn_method: ''
  salesforce:
    issuer:
      https://login.salesforce.com
    client_id:
      xxxxxxxxx.yyy
    client_secret:
      2222222222
    redirect_uris:
      - https://localhost:8089/authz_cb/salesforce
    client_preferences:
      response_types:
        - code
      scope:
        - openid
        - profile
        - email
      token_endpoint_auth_method: client_secret_basic
    services:
      discovery:
        class: oidcservice.rp.provider_info_discovery.ProviderInfoDiscovery
      authorization:
        class: oidcservice.oidc.authorization.Authorization
      accesstoken:
        class: oidcservice.oidc.accesstoken.Accesstoken
      refresh_accesstoken:
        class: oidcservice.oidc.refresh_access_token.RefreshAccessToken
      userinfo:
        class: oidcservice.oidc.userinfo.UserInfo
    keys:
      file:
        rsa: 
          - salesforce.key
  okta:
    issuer: https://dev-968755.oktapreview.com/
    client_id: 123456789
    client_secret: abcdefgh
    redirect_uris:
      - https://localhost:8089/authz_cb/okta
    client_preferences:
      response_types:
        - code
      scope:
        - openid
        - profile
        - email
      token_endpoint_auth_method: client_secret_basic
    provider_info:
      authorization_endpoint:
        https://dev-968755.oktapreview.com/oauth2/default/v1/authorize
      token_endpoint:
        https://dev-968755.oktapreview.com/oauth2/default/v1/token
      userinfo_endpoint:
        https://dev-968755.oktapreview.com/oauth2/v1/userinfo
    services:
      authorization:
        class: oidcservice.oidc.authorization.Authorization
      accesstoken:
        class: oidcservice.oidc.accesstoken.Accesstoken
      userinfo:
        class: oidcservice.oidc.userinfo.UserInfo
  pingfed:
    issuer: https://pf.example.com/
    client_id: pyrp_client
    client_secret: someSecretxxx
    redirect_uris:
      - https://localhost:8089/authz_cb/pingfed
    behaviour:
      response_types:
        - code
      scope:
        - openid
        - profile
        - email
      token_endpoint_auth_method: client_secret_basic
    provider_info:
      authorization_endpoint:
        https://pf.example.com/as/authorization.oauth2
      token_endpoint:
        https://pf.example.com/as/token.oauth2
      userinfo_endpoint:
        https://pf.example.com/idp/userinfo.openid
      services:
        authorization:
          class: oidcservice.oidc.authorization.Authorization
        accesstoken:
          class: oidcservice.oidc.accesstoken.Accesstoken
        userinfo:
          class: oidcservice.oidc.userinfo.UserInfo
      keys:
        url:
          https://pf.example.com/: https://pf.example.com/jwks.json

# Whether an attempt to fetch the userinfo should be made
userinfo: True
